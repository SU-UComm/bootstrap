/////////////////////////////////
// Bootstrap variables and mixins
@import "../bootstrap/less/variables.less"; //for some reason the compiler was yelling about specificity here.
@import "mixins.less";


/////////////////////////////////
// UComm variables
@border-color: #E3DFD5;
@btn-txt: @su-clay;
@heading-weight: 300;


/////////////////////////////////
// UComm mixins
.font-size-em (@target-px, @base-px:@font-size-base) {
  font-size: unit( round( (unit(@target-px) / unit(@base-px)), 5 ), em );
}

.line-height (@target-px, @base-px:@font-size-base) {
  line-height: round( (unit(@target-px) / unit(@base-px)), 5 );
}

//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
// Creates a method in which we can calculate EM values when we know the base pixel size.
// See http://stackoverflow.com/questions/22794231/lesscss-use-calculation-and-return-value for an example, specifically the Fourth method.
//
// Usage:
// & {
// @px-base:17;
// @em-val:12;
// margin-bottom: @unit-em;
// }
//
// Note: &{ } scopes the variables to that specific modifier. This allows for setting multiple values with this method in a single element.
//----------------------------------------------------------------------------------------

@em-val: 1; //default
@px-base: @font-size-base; // default
@unit-em: unit( (unit(@em-val) / unit(@px-base)), em );

//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------

.margin-bottom (@margin) {
  margin-bottom: unit(@margin, px);
  clear: both;
}

.center-vertical (@position:relative) {
  position: @position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}
.center-horizontal (@position:relative) {
  position: @position;
  left: 50%;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
}
.center-both (@position:relative) {
  position: @position;
  top: 50%;
  left: 50%;
  -webkit-transform: translateY(-50%) translateX(-50%);
  -ms-transform: translateY(-50%) translateX(-50%);
  transform: translateY(-50%) translateX(-50%);
}

.bottom-right-text {
  content: "";
  position: absolute;
  bottom: 0.8em;
  right: 1.2em;
  color: #820000;
  font-family: "Source Serif Pro";
  font-size: 0.9em;
  letter-spacing: .05em;
  text-transform: uppercase;
}

.small-square { // for li's - use a small clay square as the bullet
  color: @su-clay;
  position: absolute;
  top: 0;
  margin: 0 0 0 -15px;
  content: '\25AA';
}

.su-btn (@bg, @fg:white, @border:darken(@bg,5%), @bg-hover:lighten(@bg,5%), @fg-hover:@fg, @border-hover:@border) {
  background-color: @bg;
  border-color: @border;
  color: @fg;

  &:hover, &:focus, &:active {
    background-color: @bg-hover;
    border-color: @border-hover;
    color: @fg-hover;
  }

  a {
    color: @fg;

    &:hover, &:focus, &:active {
      background-color: @bg-hover;
      border-color: @border-hover;
      color: @fg-hover;
    }
  }
}

.background-gradient (@start, @stop) {
    background: mix(@start, @stop, 50%);
    background: -webkit-gradient(linear, left top, left bottom, from(@start), to(@stop));
    background: -webkit-linear-gradient(top, @start, @stop);
    background:    -moz-linear-gradient(top, @start, @stop);
    background:      -o-linear-gradient(top, @start, @stop);
    background:         linear-gradient(to bottom, @start, @stop);
}

// Webkit-style focus
.tab-focus() {
  // Default
  outline: 2px solid @su-clay;
  text-decoration: none;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}


//////////////////////////////////
// Responsive Typography Mixins

// Heading 1
.responsive-type(@element) when (@element = h1) {
  font-weight: 400;
  margin-top:0;

  @media (max-width: @screen-xs-max) {
    .font-size-em(28px);
    & {
      @px-base:28px;
      @em-val:33px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
    .font-size-em(36px);
    & {
      @px-base:36px;
      @em-val:40px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
    .font-size-em(46px);
    & {
      @px-base:46px;
      @em-val:52px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-lg-min) {
    .font-size-em(45px);
    & {
      @px-base:45px;
      @em-val:50px;
      line-height: @unit-em;
    }
  }
}

// Heading 2
.responsive-type(@element) when (@element = h2) {
  @media (max-width: @screen-xs-max) {
    .font-size-em(22px);
    & {
      @px-base: 22px;
      @em-val: 27px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
    .font-size-em(26px);
    & {
      @px-base: 26px;
      @em-val: 32px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-md-min) {
    .font-size-em(29px);
    & {
      @px-base: 29px;
      @em-val: 34px;
      line-height: @unit-em;
    }
  }
}
// Heading 3
.responsive-type(@element) when (@element = h3) {
  @media (max-width: @screen-xs-max) {
    .font-size-em(19px);
    & {
      @px-base: 19px;
      @em-val: 26px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
    .font-size-em(22px);
    & {
      @px-base: 22px;
      @em-val: 28px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-md-min) {
    .font-size-em(24px);
    & {
      @px-base:24;
      @em-val:29;
      line-height: @unit-em;
    }
  }
}

// Heading 4
.responsive-type(@element) when (@element = h4) {
  @media (max-width: @screen-xs-max) {
    .font-size-em(17px);
    & {
      @px-base: 17px;
      @em-val: 22px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
    .font-size-em(18px);
    & {
      @px-base: 18px;
      @em-val: 24px;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-md-min) {
    .font-size-em(19px);
    & {
      @px-base: 19px;
      @em-val: 24px;
      line-height: @unit-em;
    }
  }
}

// Base text
// Defaults to this when any of the above declarations are not true.

.responsive-type(@element) when (default()) {
  @media (max-width: @screen-xs-max) {
    .font-size-em(17px);
    & {
      @px-base:17;
      @em-val:24;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
    .font-size-em(16px);
    & {
      @px-base:16;
      @em-val:23;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
    .font-size-em(17px);
    & {
      @px-base:17;
      @em-val:26;
      line-height: @unit-em;
    }
  }

  @media (min-width: @screen-lg-min) {
    .font-size-em(17px);
    & {
      @px-base:17;
      @em-val:25;
      line-height: @unit-em;
    }
  }
}